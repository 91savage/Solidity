{
	"id": "4a4a4175b40b87627ac7a67c395f700c",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.17",
	"solcLongVersion": "0.8.17+commit.8df45f5f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/conditional statement/Loop.sol": {
				"content": "//SPDX-License-Identifier : MIT\r\npragma solidity >=0.8.0 < 0.9.0;\r\n\r\ncontract Loop {\r\n\r\n    //솔리디티엔 for, while, doWhile 문이 있음.\r\n    function forLoop() public {\r\n        uint8 sum = 0;\r\n        for(uint8 i=1; i<11; i++) {\r\n            \r\n        }\r\n    }\r\n\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/conditional statement/Loop.sol": {
				"Loop": {
					"abi": [
						{
							"inputs": [],
							"name": "forLoop",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/conditional statement/Loop.sol\":69:275  contract Loop {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/conditional statement/Loop.sol\":69:275  contract Loop {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xfc0e6008\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/conditional statement/Loop.sol\":150:270  function forLoop() public {... */\n    tag_3:\n      tag_4\n      tag_5\n      jump\t// in\n    tag_4:\n      stop\n    tag_5:\n        /* \"contracts/conditional statement/Loop.sol\":187:196  uint8 sum */\n      0x00\n        /* \"contracts/conditional statement/Loop.sol\":215:222  uint8 i */\n      dup1\n        /* \"contracts/conditional statement/Loop.sol\":223:224  1 */\n      0x01\n        /* \"contracts/conditional statement/Loop.sol\":215:224  uint8 i=1 */\n      swap1\n      pop\n        /* \"contracts/conditional statement/Loop.sol\":211:263  for(uint8 i=1; i<11; i++) {... */\n    tag_7:\n        /* \"contracts/conditional statement/Loop.sol\":228:230  11 */\n      0x0b\n        /* \"contracts/conditional statement/Loop.sol\":226:227  i */\n      dup2\n        /* \"contracts/conditional statement/Loop.sol\":226:230  i<11 */\n      0xff\n      and\n      lt\n        /* \"contracts/conditional statement/Loop.sol\":211:263  for(uint8 i=1; i<11; i++) {... */\n      iszero\n      tag_8\n      jumpi\n        /* \"contracts/conditional statement/Loop.sol\":232:235  i++ */\n      dup1\n      dup1\n      tag_10\n      swap1\n      tag_11\n      jump\t// in\n    tag_10:\n      swap2\n      pop\n      pop\n        /* \"contracts/conditional statement/Loop.sol\":211:263  for(uint8 i=1; i<11; i++) {... */\n      jump(tag_7)\n    tag_8:\n      pop\n        /* \"contracts/conditional statement/Loop.sol\":176:270  {... */\n      pop\n        /* \"contracts/conditional statement/Loop.sol\":150:270  function forLoop() public {... */\n      jump\t// out\n        /* \"#utility.yul\":7:187   */\n    tag_12:\n        /* \"#utility.yul\":55:132   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":52:53   */\n      0x00\n        /* \"#utility.yul\":45:133   */\n      mstore\n        /* \"#utility.yul\":152:156   */\n      0x11\n        /* \"#utility.yul\":149:150   */\n      0x04\n        /* \"#utility.yul\":142:157   */\n      mstore\n        /* \"#utility.yul\":176:180   */\n      0x24\n        /* \"#utility.yul\":173:174   */\n      0x00\n        /* \"#utility.yul\":166:181   */\n      revert\n        /* \"#utility.yul\":193:279   */\n    tag_13:\n        /* \"#utility.yul\":228:235   */\n      0x00\n        /* \"#utility.yul\":268:272   */\n      0xff\n        /* \"#utility.yul\":261:266   */\n      dup3\n        /* \"#utility.yul\":257:273   */\n      and\n        /* \"#utility.yul\":246:273   */\n      swap1\n      pop\n        /* \"#utility.yul\":193:279   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":285:452   */\n    tag_11:\n        /* \"#utility.yul\":322:325   */\n      0x00\n        /* \"#utility.yul\":345:367   */\n      tag_18\n        /* \"#utility.yul\":361:366   */\n      dup3\n        /* \"#utility.yul\":345:367   */\n      tag_13\n      jump\t// in\n    tag_18:\n        /* \"#utility.yul\":336:367   */\n      swap2\n      pop\n        /* \"#utility.yul\":389:393   */\n      0xff\n        /* \"#utility.yul\":382:387   */\n      dup3\n        /* \"#utility.yul\":379:394   */\n      sub\n        /* \"#utility.yul\":376:417   */\n      tag_19\n      jumpi\n        /* \"#utility.yul\":397:415   */\n      tag_20\n      tag_12\n      jump\t// in\n    tag_20:\n        /* \"#utility.yul\":376:417   */\n    tag_19:\n        /* \"#utility.yul\":444:445   */\n      0x01\n        /* \"#utility.yul\":437:442   */\n      dup3\n        /* \"#utility.yul\":433:446   */\n      add\n        /* \"#utility.yul\":426:446   */\n      swap1\n      pop\n        /* \"#utility.yul\":285:452   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220c3b43f0943a5c42a752e71d290aa9341586124d101fef17f72894170ca36e55964736f6c63430008110033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5060f28061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063fc0e600814602d575b600080fd5b60336035565b005b600080600190505b600b8160ff16101560585780806051906098565b915050603d565b5050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b600060a182608b565b915060ff820360b15760b0605c565b5b60018201905091905056fea2646970667358221220c3b43f0943a5c42a752e71d290aa9341586124d101fef17f72894170ca36e55964736f6c63430008110033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xF2 DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xFC0E6008 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x35 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 POP JUMPDEST PUSH1 0xB DUP2 PUSH1 0xFF AND LT ISZERO PUSH1 0x58 JUMPI DUP1 DUP1 PUSH1 0x51 SWAP1 PUSH1 0x98 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x3D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA1 DUP3 PUSH1 0x8B JUMP JUMPDEST SWAP2 POP PUSH1 0xFF DUP3 SUB PUSH1 0xB1 JUMPI PUSH1 0xB0 PUSH1 0x5C JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC3 0xB4 EXTCODEHASH MULMOD NUMBER 0xA5 0xC4 0x2A PUSH22 0x2E71D290AA9341586124D101FEF17F72894170CA36E5 MSIZE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "69:206:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@forLoop_21": {
									"entryPoint": 53,
									"id": 21,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"cleanup_t_uint8": {
									"entryPoint": 139,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"increment_t_uint8": {
									"entryPoint": 152,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 92,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:455:1",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "35:152:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "52:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "55:77:1",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "45:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "45:88:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "45:88:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "149:1:1",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "152:4:1",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "142:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "142:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "142:15:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "173:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "176:4:1",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "166:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "166:15:1"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "7:180:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "236:43:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "246:27:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "261:5:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "268:4:1",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "257:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "257:16:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "246:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "218:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "228:7:1",
														"type": ""
													}
												],
												"src": "193:86:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "326:126:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "336:31:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "361:5:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nodeType": "YulIdentifier",
																	"src": "345:15:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "345:22:1"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "336:5:1"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "395:22:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "397:16:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "397:18:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "397:18:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "382:5:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "389:4:1",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "379:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "379:15:1"
															},
															"nodeType": "YulIf",
															"src": "376:41:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "426:20:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "437:5:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "444:1:1",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "433:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "433:13:1"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "426:3:1"
																}
															]
														}
													]
												},
												"name": "increment_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "312:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "322:3:1",
														"type": ""
													}
												],
												"src": "285:167:1"
											}
										]
									},
									"contents": "{\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function increment_t_uint8(value) -> ret {\n        value := cleanup_t_uint8(value)\n        if eq(value, 0xff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n}\n",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b506004361060285760003560e01c8063fc0e600814602d575b600080fd5b60336035565b005b600080600190505b600b8160ff16101560585780806051906098565b915050603d565b5050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b600060a182608b565b915060ff820360b15760b0605c565b5b60018201905091905056fea2646970667358221220c3b43f0943a5c42a752e71d290aa9341586124d101fef17f72894170ca36e55964736f6c63430008110033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xFC0E6008 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x35 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 POP JUMPDEST PUSH1 0xB DUP2 PUSH1 0xFF AND LT ISZERO PUSH1 0x58 JUMPI DUP1 DUP1 PUSH1 0x51 SWAP1 PUSH1 0x98 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x3D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA1 DUP3 PUSH1 0x8B JUMP JUMPDEST SWAP2 POP PUSH1 0xFF DUP3 SUB PUSH1 0xB1 JUMPI PUSH1 0xB0 PUSH1 0x5C JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC3 0xB4 EXTCODEHASH MULMOD NUMBER 0xA5 0xC4 0x2A PUSH22 0x2E71D290AA9341586124D101FEF17F72894170CA36E5 MSIZE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "69:206:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;150:120;;;:::i;:::-;;;187:9;215:7;223:1;215:9;;211:52;228:2;226:1;:4;;;211:52;;;232:3;;;;;:::i;:::-;;;;211:52;;;;176:94;150:120::o;7:180:1:-;55:77;52:1;45:88;152:4;149:1;142:15;176:4;173:1;166:15;193:86;228:7;268:4;261:5;257:16;246:27;;193:86;;;:::o;285:167::-;322:3;345:22;361:5;345:22;:::i;:::-;336:31;;389:4;382:5;379:15;376:41;;397:18;;:::i;:::-;376:41;444:1;437:5;433:13;426:20;;285:167;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "48400",
								"executionCost": "99",
								"totalCost": "48499"
							},
							"external": {
								"forLoop()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 69,
									"end": 275,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 69,
									"end": 275,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 69,
									"end": 275,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 69,
									"end": 275,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 69,
									"end": 275,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 69,
									"end": 275,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 69,
									"end": 275,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 69,
									"end": 275,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 69,
									"end": 275,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 69,
									"end": 275,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 69,
									"end": 275,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 69,
									"end": 275,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 69,
									"end": 275,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 69,
									"end": 275,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 69,
									"end": 275,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 69,
									"end": 275,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 69,
									"end": 275,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 69,
									"end": 275,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 69,
									"end": 275,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 69,
									"end": 275,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 69,
									"end": 275,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220c3b43f0943a5c42a752e71d290aa9341586124d101fef17f72894170ca36e55964736f6c63430008110033",
									".code": [
										{
											"begin": 69,
											"end": 275,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 69,
											"end": 275,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 69,
											"end": 275,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 69,
											"end": 275,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 69,
											"end": 275,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 69,
											"end": 275,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 69,
											"end": 275,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 69,
											"end": 275,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 69,
											"end": 275,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 69,
											"end": 275,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "PUSH",
											"source": 0,
											"value": "FC0E6008"
										},
										{
											"begin": 69,
											"end": 275,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 69,
											"end": 275,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 69,
											"end": 275,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 69,
											"end": 275,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 69,
											"end": 275,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 150,
											"end": 270,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 150,
											"end": 270,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 150,
											"end": 270,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 150,
											"end": 270,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 150,
											"end": 270,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 150,
											"end": 270,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 150,
											"end": 270,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 150,
											"end": 270,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 150,
											"end": 270,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 150,
											"end": 270,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 187,
											"end": 196,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 215,
											"end": 222,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 223,
											"end": 224,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 215,
											"end": 224,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 215,
											"end": 224,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 211,
											"end": 263,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 211,
											"end": 263,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 228,
											"end": 230,
											"name": "PUSH",
											"source": 0,
											"value": "B"
										},
										{
											"begin": 226,
											"end": 227,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 226,
											"end": 230,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 226,
											"end": 230,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 226,
											"end": 230,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 211,
											"end": 263,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 211,
											"end": 263,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 211,
											"end": 263,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 232,
											"end": 235,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 235,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 235,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 232,
											"end": 235,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 235,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 232,
											"end": 235,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 232,
											"end": 235,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 232,
											"end": 235,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 232,
											"end": 235,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 232,
											"end": 235,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 232,
											"end": 235,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 211,
											"end": 263,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 211,
											"end": 263,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 211,
											"end": 263,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 211,
											"end": 263,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 211,
											"end": 263,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 176,
											"end": 270,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 150,
											"end": 270,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7,
											"end": 187,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 7,
											"end": 187,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 55,
											"end": 132,
											"name": "PUSH",
											"source": 1,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 52,
											"end": 53,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 45,
											"end": 133,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 152,
											"end": 156,
											"name": "PUSH",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 149,
											"end": 150,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 142,
											"end": 157,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 176,
											"end": 180,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 173,
											"end": 174,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 166,
											"end": 181,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 193,
											"end": 279,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 193,
											"end": 279,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 228,
											"end": 235,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 268,
											"end": 272,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 261,
											"end": 266,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 257,
											"end": 273,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 246,
											"end": 273,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 246,
											"end": 273,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 193,
											"end": 279,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 193,
											"end": 279,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 193,
											"end": 279,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 193,
											"end": 279,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 285,
											"end": 452,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 285,
											"end": 452,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 322,
											"end": 325,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 345,
											"end": 367,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 361,
											"end": 366,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 345,
											"end": 367,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 345,
											"end": 367,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 345,
											"end": 367,
											"name": "tag",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 345,
											"end": 367,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 336,
											"end": 367,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 336,
											"end": 367,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 389,
											"end": 393,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 382,
											"end": 387,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 379,
											"end": 394,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 376,
											"end": 417,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 376,
											"end": 417,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 397,
											"end": 415,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 397,
											"end": 415,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 397,
											"end": 415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 397,
											"end": 415,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 397,
											"end": 415,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 376,
											"end": 417,
											"name": "tag",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 376,
											"end": 417,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 444,
											"end": 445,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 437,
											"end": 442,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 433,
											"end": 446,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 426,
											"end": 446,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 426,
											"end": 446,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 285,
											"end": 452,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 285,
											"end": 452,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 285,
											"end": 452,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 285,
											"end": 452,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										}
									]
								}
							},
							"sourceList": [
								"contracts/conditional statement/Loop.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"forLoop()": "fc0e6008"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"forLoop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/conditional statement/Loop.sol\":\"Loop\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/conditional statement/Loop.sol\":{\"keccak256\":\"0x9e2f54876353736304e3c696a51bd351871ee703264cbdcd35742af4a069b489\",\"urls\":[\"bzz-raw://e3c3c1ee3277982ab2742c03a30a0bb91a9c6015aa57f63cb730a58d4c7eda38\",\"dweb:/ipfs/QmXUCb2CcwUHqrHgCLuTeoVqhyCfMc7PjHr9daEbczS97F\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/conditional statement/Loop.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "contracts/conditional statement/Loop.sol",
					"start": -1
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "Warning: Unused local variable.\n --> contracts/conditional statement/Loop.sol:8:9:\n  |\n8 |         uint8 sum = 0;\n  |         ^^^^^^^^^\n\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 196,
					"file": "contracts/conditional statement/Loop.sol",
					"start": 187
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2018",
				"formattedMessage": "Warning: Function state mutability can be restricted to pure\n --> contracts/conditional statement/Loop.sol:7:5:\n  |\n7 |     function forLoop() public {\n  |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Function state mutability can be restricted to pure",
				"severity": "warning",
				"sourceLocation": {
					"end": 270,
					"file": "contracts/conditional statement/Loop.sol",
					"start": 150
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/conditional statement/Loop.sol": {
				"ast": {
					"absolutePath": "contracts/conditional statement/Loop.sol",
					"exportedSymbols": {
						"Loop": [
							22
						]
					},
					"id": 23,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:32:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Loop",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 22,
							"linearizedBaseContracts": [
								22
							],
							"name": "Loop",
							"nameLocation": "78:4:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 20,
										"nodeType": "Block",
										"src": "176:94:0",
										"statements": [
											{
												"assignments": [
													5
												],
												"declarations": [
													{
														"constant": false,
														"id": 5,
														"mutability": "mutable",
														"name": "sum",
														"nameLocation": "193:3:0",
														"nodeType": "VariableDeclaration",
														"scope": 20,
														"src": "187:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 4,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "187:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 7,
												"initialValue": {
													"hexValue": "30",
													"id": 6,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "199:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "187:13:0"
											},
											{
												"body": {
													"id": 18,
													"nodeType": "Block",
													"src": "237:26:0",
													"statements": []
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 14,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 12,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "226:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "3131",
														"id": 13,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "228:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_11_by_1",
															"typeString": "int_const 11"
														},
														"value": "11"
													},
													"src": "226:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 19,
												"initializationExpression": {
													"assignments": [
														9
													],
													"declarations": [
														{
															"constant": false,
															"id": 9,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "221:1:0",
															"nodeType": "VariableDeclaration",
															"scope": 19,
															"src": "215:7:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"typeName": {
																"id": 8,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "215:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 11,
													"initialValue": {
														"hexValue": "31",
														"id": 10,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "223:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "215:9:0"
												},
												"loopExpression": {
													"expression": {
														"id": 16,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "232:3:0",
														"subExpression": {
															"id": 15,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 9,
															"src": "232:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 17,
													"nodeType": "ExpressionStatement",
													"src": "232:3:0"
												},
												"nodeType": "ForStatement",
												"src": "211:52:0"
											}
										]
									},
									"functionSelector": "fc0e6008",
									"id": 21,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forLoop",
									"nameLocation": "159:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "166:2:0"
									},
									"returnParameters": {
										"id": 3,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "176:0:0"
									},
									"scope": 22,
									"src": "150:120:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 23,
							"src": "69:206:0",
							"usedErrors": []
						}
					],
					"src": "33:242:0"
				},
				"id": 0
			}
		}
	}
}